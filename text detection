import cv2
import numpy as np 
import pytesseract
import os
per=25
roi=[[(625,239),(925,125),'text','Name']]
pytesseract.pytesseract.tesseract_cmd="C:/Program Files/Tesseract-OCR/tesseract.exe"
imgQ=cv2.imread('ty/sample/22.jpg')
#cv2.imshow("output",imgQ)
h,w,c=imgQ.shape
#imgQ=cv2.resize(imgQ,(w//6,h//6))
orb=cv2.ORB_create(1000)
kp1,des1=orb.detectAndCompute(imgQ,None)
path='ty/sample'
myPicList=os.listdir(path)
for j,y in enumerate(myPicList):
    img=cv2.imread(path+"/"+y)
#    img=cv2.resize(img,(w//6,h//6))
#    cv2.imshow(y,img)
    kp2,des2=orb.detectAndCompute(img,None)
    bf=cv2.BFMatcher(cv2.NORM_HAMMING)
    matches=bf.match(des2,des1)
    matches.sort( key=lambda x: x.distance)
#    matches.sort(key=_lambda x:x.distance)
    good=matches[:int(len(matches)*(per/100))]
    
    imgMatch=cv2.drawMatches(img,kp2,imgQ,kp1,good[:100],None,flags=2)
    imgMatch=cv2.resize(imgMatch,(w//3,h//3))
    #cv2.imshow(y,imgMatch)
    srcPoint = np.float32([kp2[m.queryIdx].pt for m in good]).reshape(-1, 1, 2)
    dstPoint = np.float32([kp1[m.trainIdx].pt for m in good]).reshape(-1, 1, 2)
#    srcPoint=np.float32([kp2[m.queryIdx].pt for m in good_]).reshape(-1,1,2)
#    dstPoint=np.float32([kp1[m.trainIdx].pt for m in good]).reshape(-1, 1, 2)
    
    M, _=cv2.findHomography(srcPoint,dstPoint,cv2.RANSAC,5.0)
    
    imgScan=cv2.warpPerspective(img,M,(w,h))
    
        
#    cv2.imshow(y,imgScan)
    imgShow=imgScan.copy()
    imgMask=np.zeros_like(imgShow)
    myData=[]
    for x,r in enumerate(roi):
        cv2.rectangle(imgMask,(r[0][0],r[0][1]),(r[1][0],r[1][1]),(0,255,0,),cv2.FILLED)
        imgShow=cv2.addWeighted(imgShow,0.99,imgMask,0.1,0)
#    imgShow=cv2.resize(imgShow,(w//6,h//6))
#    cv2.imshow(y+"2" ,imgShow)
        imgCrop=imgScan[r[0][1]:r[1][1],r[0][0]:r[1][0]]
#        cv2.imshow(x+"1" ,imgCrop)
        print(pytesseract.image_to_string(imgCrop))
        myData.append(pytesseract.image_to_string(imgCrop))
         
    print(myData)
    
    img=cv2.resize(imgShow,(w//6,h//6)) 
    cv2.imshow(str(y+"2") ,imgShow)
#imkp1=cv2.drawKeypoints(imgQ,kp1,None)
#cv2.imshow("key point ",imkp1)
# =============================================================================
#cv2.imshow("output",imgQ)
if cv2.waitKey(0) & 0xFF== ord('q'):
    
    cv2.destroyAllWindows()
# =============================================================================
